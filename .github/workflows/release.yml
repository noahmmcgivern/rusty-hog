name: Release

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

env:
  PROJECT_NAME: rustyhog

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        build: [x86_64-linux, aarch64-linux, x86_64-macos]
        include:
        - build: x86_64-linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
        - build: aarch64-linux
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          cross: true
        - build: x86_64-macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
          cross: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      # - name: Install gcc-aarch64-linux-gnu
      #   run: sudo apt-get install -y gcc-aarch64-linux-gnu
      #   if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: test
          args: --release --target ${{ matrix.target }}
      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          find target/${{ matrix.target }}/release -type f -maxdepth 1 -iname "*_hog" -exec cp {} dist/ \;
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist
  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: List binaries
        run: ls -lah bins-*
      - name: Get tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname
      - name: Build archive
        shell: bash
        run: |
          set -ex
          rm -rf tmp
          mkdir tmp
          mkdir dist
          for dir in bins-*;
          do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              ls -lah $dir
              chmod +x $dir/*
              mkdir tmp/$pkgname
              mv $dir/* tmp/$pkgname
              if [ "$exe" = "" ]; then
                tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true
      # - name: Extract version
      #   id: extract-version
      #   run: printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
